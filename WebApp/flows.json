[
    {
        "id": "8a64b2be14e1014a",
        "type": "tab",
        "label": "BLEScanner",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ad4a6b70f7aa172",
        "type": "mqtt in",
        "z": "8a64b2be14e1014a",
        "name": "",
        "topic": "BLEScanner/device/data",
        "qos": "0",
        "datatype": "auto",
        "broker": "28f7ceb9.8189a2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 190,
        "y": 520,
        "wires": [
            [
                "306d39b8cec81274",
                "87201e186ac5f1fc"
            ]
        ]
    },
    {
        "id": "87201e186ac5f1fc",
        "type": "debug",
        "z": "8a64b2be14e1014a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 520,
        "wires": []
    },
    {
        "id": "306d39b8cec81274",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "scanParser",
        "func": "var g=msg.payload\ng=g.replace(',,,','')\nvar data=g.split(';');\nmsg.payload=data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "ceeded1a1f496b04"
            ]
        ]
    },
    {
        "id": "ec9722748402c62b",
        "type": "sqlite",
        "z": "8a64b2be14e1014a",
        "mydb": "16d7cc710fadc2b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "a37e537d71411bb2"
            ]
        ]
    },
    {
        "id": "6e25bf92705e126e",
        "type": "inject",
        "z": "8a64b2be14e1014a",
        "name": "createTable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE scan(    ID INTEGER PRIMARY KEY     AUTOINCREMENT,   Timestamp DATETIME DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f',(datetime('now','localtime')))), MAC           TEXT    ,    Name            TEXT     ,    Address        TEXT,    RSSI\t\tText );",
        "payloadType": "date",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "ec9722748402c62b"
            ]
        ]
    },
    {
        "id": "a37e537d71411bb2",
        "type": "debug",
        "z": "8a64b2be14e1014a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 60,
        "wires": []
    },
    {
        "id": "d4cf7cb04eb8679a",
        "type": "inject",
        "z": "8a64b2be14e1014a",
        "name": "showAll",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from scan group by Address;",
        "payloadType": "date",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "ec9722748402c62b",
                "d445e9c19f877942"
            ]
        ]
    },
    {
        "id": "ceeded1a1f496b04",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "dbInsert",
        "func": "var g=msg.payload\nvar mac=g[0].split(',')\ng[0]=mac[1]+','+mac[2]+','+mac[3]\n\nvar vals=\"\";\nvar spl;\n// try {\nfor (let i=0;i<g.length;i++){\n  g[i]=g[i].replace('\\r\\n','')\n  g[i]=g[i].replace('\\n','')\n  g[i]=g[i].replace(',,,','')\n  \n  g[i]=mac[0]+','+g[i];\n  spl=g[i].split(',');\n  g[i]='\\\"'+spl[0]+'\\\",\\\"'+spl[1]+'\\\",\\\"'+spl[2]+'\\\",\\\"'+spl[3]+'\\\"';\n  vals=vals+'('+g[i]+'),';\n  \n   \n}\n\nvals=vals.slice(0, -1);\n\n\nmsg.topic='INSERT INTO scan(MAC,Name,Address,RSSI) VALUES '+vals;\nreturn msg;\n// }\n// catch(err){\n    \n// }\n\n// for (let i = 0; i < g.length; i++) {\n// msg.topic='INSERT OR REPLACE INTO scan(MAC, Name, Address, RSSI) VALUES($MAC,$Name,$Address,$RSSI)'\n// msg.payload=g;\n// }\n//msg.payload=pHolders;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "87201e186ac5f1fc",
                "ec9722748402c62b"
            ]
        ]
    },
    {
        "id": "ba9bf9b4245a7d74",
        "type": "inject",
        "z": "8a64b2be14e1014a",
        "name": "DropTable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DROP TABLE scan",
        "payloadType": "date",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "ec9722748402c62b"
            ]
        ]
    },
    {
        "id": "d445e9c19f877942",
        "type": "sqlite",
        "z": "8a64b2be14e1014a",
        "mydb": "16d7cc710fadc2b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "0c1b59989df2bb0e"
            ]
        ]
    },
    {
        "id": "a1995042a008326c",
        "type": "ui_button",
        "z": "8a64b2be14e1014a",
        "name": "",
        "group": "4a6b34b6c3a279f7",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "select Timestamp, MAC,Name,Address,RSSI from scan group by Address ORDER BY Timestamp DESC;",
        "topicType": "str",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "d445e9c19f877942",
                "b5858cffbf92f0cb",
                "c3a81ba04951f9f7"
            ]
        ]
    },
    {
        "id": "0c1b59989df2bb0e",
        "type": "ui_table",
        "z": "8a64b2be14e1014a",
        "group": "4a6b34b6c3a279f7",
        "name": "",
        "order": 7,
        "width": 19,
        "height": 15,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "cbb22c8d618918fa",
        "type": "debug",
        "z": "8a64b2be14e1014a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 380,
        "wires": []
    },
    {
        "id": "e44c12187cdc9340",
        "type": "inject",
        "z": "8a64b2be14e1014a",
        "name": "showMacs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select DISTINCT MAC from scan",
        "payloadType": "date",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "ec9722748402c62b"
            ]
        ]
    },
    {
        "id": "ffb0939bf20ede56",
        "type": "ui_dropdown",
        "z": "8a64b2be14e1014a",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "4a6b34b6c3a279f7",
        "order": 2,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 860,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3097985b97c6c697",
        "type": "sqlite",
        "z": "8a64b2be14e1014a",
        "mydb": "16d7cc710fadc2b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 400,
        "y": 440,
        "wires": [
            [
                "a30d75a726541617",
                "cbb22c8d618918fa"
            ]
        ]
    },
    {
        "id": "b5858cffbf92f0cb",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "getMacs",
        "func": "msg.topic='select DISTINCT MAC from scan'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "3097985b97c6c697"
            ]
        ]
    },
    {
        "id": "a30d75a726541617",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "parseMacs",
        "func": "var a=msg.payload[0]['MAC']\nvar macs=[]\nmacs.push(a)\nmsg.options=macs\nmsg.payload=a\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 440,
        "wires": [
            [
                "ffb0939bf20ede56",
                "cbb22c8d618918fa"
            ]
        ]
    },
    {
        "id": "f23c35d7522741a5",
        "type": "inject",
        "z": "8a64b2be14e1014a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "1190b3a5a04241c8"
            ]
        ]
    },
    {
        "id": "1190b3a5a04241c8",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "",
        "func": "var dateFormat = function () {\n\tvar\ttoken = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n\t\ttimezoneClip = /[^-+\\dA-Z]/g,\n\t\tpad = function (val, len) {\n\t\t\tval = String(val);\n\t\t\tlen = len || 2;\n\t\t\twhile (val.length < len) val = \"0\" + val;\n\t\t\treturn val;\n\t\t};\n\n\t// Regexes and supporting functions are cached through closure\n\treturn function (date, mask, utc) {\n\t\tvar dF = dateFormat;\n\n\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n\t\t\tmask = date;\n\t\t\tdate = undefined;\n\t\t}\n\n\t\t// Passing date through Date applies Date.parse, if necessary\n\t\tdate = date ? new Date(date) : new Date;\n\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n\t\t// Allow setting the utc argument via the mask\n\t\tif (mask.slice(0, 4) == \"UTC:\") {\n\t\t\tmask = mask.slice(4);\n\t\t\tutc = true;\n\t\t}\n\n\t\tvar\t_ = utc ? \"getUTC\" : \"get\",\n\t\t\td = date[_ + \"Date\"](),\n\t\t\tD = date[_ + \"Day\"](),\n\t\t\tm = date[_ + \"Month\"](),\n\t\t\ty = date[_ + \"FullYear\"](),\n\t\t\tH = date[_ + \"Hours\"](),\n\t\t\tM = date[_ + \"Minutes\"](),\n\t\t\ts = date[_ + \"Seconds\"](),\n\t\t\tL = date[_ + \"Milliseconds\"](),\n\t\t\to = utc ? 0 : date.getTimezoneOffset(),\n\t\t\tflags = {\n\t\t\t\td:    d,\n\t\t\t\tdd:   pad(d),\n\t\t\t\tddd:  dF.i18n.dayNames[D],\n\t\t\t\tdddd: dF.i18n.dayNames[D + 7],\n\t\t\t\tm:    m + 1,\n\t\t\t\tmm:   pad(m + 1),\n\t\t\t\tmmm:  dF.i18n.monthNames[m],\n\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],\n\t\t\t\tyy:   String(y).slice(2),\n\t\t\t\tyyyy: y,\n\t\t\t\th:    H % 12 || 12,\n\t\t\t\thh:   pad(H % 12 || 12),\n\t\t\t\tH:    H,\n\t\t\t\tHH:   pad(H),\n\t\t\t\tM:    M,\n\t\t\t\tMM:   pad(M),\n\t\t\t\ts:    s,\n\t\t\t\tss:   pad(s),\n\t\t\t\tl:    pad(L, 3),\n\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),\n\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",\n\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",\n\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",\n\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",\n\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n\t\t\t};\n\n\t\treturn mask.replace(token, function ($0) {\n\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n\t\t});\n\t};\n}();\n\n// Some common format strings\ndateFormat.masks = {\n\t\"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n\tshortDate:      \"m/d/yy\",\n\tmediumDate:     \"mmm d, yyyy\",\n\tlongDate:       \"mmmm d, yyyy\",\n\tfullDate:       \"dddd, mmmm d, yyyy\",\n\tshortTime:      \"h:MM TT\",\n\tmediumTime:     \"h:MM:ss TT\",\n\tlongTime:       \"h:MM:ss TT Z\",\n\tisoDate:        \"yyyy-mm-dd\",\n\tisoTime:        \"HH:MM:ss\",\n\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n\tdayNames: [\n\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n\t],\n\tmonthNames: [\n\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t]\n};\n\n// For convenience...\nDate.prototype.format = function (mask, utc) {\n\treturn dateFormat(this, mask, utc);\n};\nvar now = new Date();\n\n\nvar g=now.format(\"yyyy-mm-dd HH:MM:ss.l\");\nmsg.payload=g\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "72d539e37c86a360"
            ]
        ]
    },
    {
        "id": "72d539e37c86a360",
        "type": "debug",
        "z": "8a64b2be14e1014a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 240,
        "wires": []
    },
    {
        "id": "2cad837bd07df74f",
        "type": "csv",
        "z": "8a64b2be14e1014a",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "ID,Timestamp,MAC,Name,Address,RSSI",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 990,
        "y": 20,
        "wires": [
            [
                "698f8273fd27ba43",
                "4aebf93709d96e75"
            ]
        ]
    },
    {
        "id": "98109ef518ecad45",
        "type": "sqlite",
        "z": "8a64b2be14e1014a",
        "mydb": "16d7cc710fadc2b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 840,
        "y": 120,
        "wires": [
            [
                "698f8273fd27ba43",
                "2cad837bd07df74f"
            ]
        ]
    },
    {
        "id": "698f8273fd27ba43",
        "type": "debug",
        "z": "8a64b2be14e1014a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 60,
        "wires": []
    },
    {
        "id": "4aebf93709d96e75",
        "type": "file",
        "z": "8a64b2be14e1014a",
        "name": "",
        "filename": "data.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1270,
        "y": 120,
        "wires": [
            [
                "2a2822f8dec98696"
            ]
        ]
    },
    {
        "id": "68e03c703c275e9d",
        "type": "http in",
        "z": "8a64b2be14e1014a",
        "name": "",
        "url": "/data.csv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "0a3440089814e94f"
            ]
        ]
    },
    {
        "id": "2a2822f8dec98696",
        "type": "http response",
        "z": "8a64b2be14e1014a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 180,
        "wires": []
    },
    {
        "id": "0a3440089814e94f",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "",
        "func": "msg.topic=\"select * from scan;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "98109ef518ecad45"
            ]
        ]
    },
    {
        "id": "854b256ff22748b0",
        "type": "ui_template",
        "z": "8a64b2be14e1014a",
        "group": "4a6b34b6c3a279f7",
        "name": "",
        "order": 3,
        "width": 3,
        "height": 1,
        "format": "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\">\n<form method=\"get\" action=\"/data.csv\" download target=\"_blank\" download>\n       \n          \n       <button type=\"submit\" class=\"button is-primary\">Open CSV RAW</button>\n      \n</form>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ca6c83e0ad3d1bfe",
        "type": "ui_template",
        "z": "8a64b2be14e1014a",
        "group": "4a6b34b6c3a279f7",
        "name": "",
        "order": 5,
        "width": 3,
        "height": 1,
        "format": " \n \n <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\">\n\n<a href=\"/data.csv\" class=\"button is-link\" download=\"data.csv\">Download CSV </a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c3a81ba04951f9f7",
        "type": "trigger",
        "z": "8a64b2be14e1014a",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 100,
        "y": 440,
        "wires": [
            [
                "a735907fe63d456d"
            ]
        ]
    },
    {
        "id": "a735907fe63d456d",
        "type": "function",
        "z": "8a64b2be14e1014a",
        "name": "topicSetSQL",
        "func": "msg.topic=\"select Timestamp, MAC,Name,Address,RSSI from scan group by Address ORDER BY Timestamp DESC;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 480,
        "wires": [
            [
                "87201e186ac5f1fc",
                "d445e9c19f877942",
                "0a3440089814e94f"
            ]
        ]
    },
    {
        "id": "063a9064d56cbe03",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "7ebee094495f3bcc",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "f67527d10a51e11d",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "78248c14e4bd5752",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "9bc4339611170007",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "be9de6a81b9aef38",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "fb9db0c821da1352",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "ea658c13c46b0044",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "01139c7fee45ff9a",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "acea806542302b05",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "8716706abf8951a6",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "05cbfde81673383c",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "508e3eb82e39692d",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "ef623ce24dca874a",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "67915bdacad83c5c",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "3bee5b6e91f84b1d",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "77e07214e4d28fef",
        "type": "ui_spacer",
        "z": "8a64b2be14e1014a",
        "name": "spacer",
        "group": "4a6b34b6c3a279f7",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "28f7ceb9.8189a2",
        "type": "mqtt-broker",
        "name": "hivemq",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": "",
        "credentials": {}
    },
    {
        "id": "16d7cc710fadc2b8",
        "type": "sqlitedb",
        "db": "database",
        "mode": "RWC"
    },
    {
        "id": "4a6b34b6c3a279f7",
        "type": "ui_group",
        "name": "BLE Scanner",
        "tab": "0d1595cae077f92b",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0d1595cae077f92b",
        "type": "ui_tab",
        "name": "BluetoothScanner",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    }
]